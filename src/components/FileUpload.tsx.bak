import React, { useCallback, useState } from 'react';
import { useDropzone } from 'react-dropzone';
import Papa from 'papaparse';
import * as XLSX from 'xlsx';
import { format } from 'date-fns';
import * as pdfjs from 'pdfjs-dist';
import { useFinancial } from '../context/FinancialContext';
import { useAuth } from '../context/AuthContext';
import AuthModal from './auth/AuthModal';
import PaywallModal from './payment/PaywallModal';
import { convertCurrency } from '../utils/currencyConverter';
import { aiFileParsingService } from '../services/AiFileParsingService';
import { readFileAsText } from '../utils/fileUtils';
import { conversionTracking } from '../services/ConversionTrackingService';
import { trackEvent } from '../utils/analytics';
import { parseDate, normalizeAmount, suggestCategory, detectDuplicates } from '../utils/financialUtils';

// Set the worker source for PDF.js
pdfjs.GlobalWorkerOptions.workerSrc = '/pdf.worker.min.mjs';

// Supported file formats and their extensions
const SUPPORTED_FORMATS = {
  CSV: ['.csv'],
  EXCEL: ['.xlsx', '.xls'],
  QUICKBOOKS: ['.qbo', '.qfx'],
  PDF: ['.pdf']
} as const;

const CURRENCY_CODES = ['USD', 'EUR', 'GBP', 'CAD', 'AUD', 'JPY', 'CNY'] as const;

interface FinancialRecord {
  date: string;
  amount: number;
  category: string;
  type: 'income' | 'expense';
  description?: string;
  reference?: string;
  account?: string;
  currency?: string;
  status?: 'pending' | 'completed' | 'failed';
  tags?: string[];
}

interface ValidationResult {
  isValid: boolean;
  warnings: string[];
  errors: string[];
}

interface PreprocessingOptions {
  categorize: boolean;
  normalizeAmounts: boolean;
  detectDuplicates: boolean;
  validateDates: boolean;
  convertCurrency: boolean;
  extractTags: boolean;
}

// Sample data with enhanced fields
const sampleData: FinancialRecord[] = [
  { 
    date: '2025-01-01', 
    amount: 1000.00, 
    category: 'Sales', 
    type: 'income', 
    description: 'Monthly revenue',
    currency: 'USD',
    status: 'completed',
    tags: ['recurring', 'revenue']
  },
  { 
    date: '2025-01-02', 
    amount: -50.00, 
    category: 'Office Supplies', 
    type: 'expense', 
    description: 'Office materials',
    currency: 'USD',
    status: 'completed',
    tags: ['office', 'supplies']
  },
  { 
    date: '2025-01-03', 
    amount: 500.00, 
    category: 'Consulting', 
    type: 'income', 
    description: 'Consulting fees',
    currency: 'USD',
    status: 'completed',
    tags: ['consulting', 'revenue']
  }
];

const validateFinancialRecord = (record: Partial<FinancialRecord>, index: number): ValidationResult => {
  const warnings: string[] = [];
  const errors: string[] = [];

  // Date validation
  if (!record.date) {
    errors.push(`Row ${index + 2}: Missing date`);
  } else if (new Date(record.date) > new Date()) {
    warnings.push(`Row ${index + 2}: Future date detected`);
  }

  // Amount validation
  if (record.amount === undefined || record.amount === null) {
    errors.push(`Row ${index + 2}: Missing amount`);
  } else if (record.amount === 0) {
    warnings.push(`Row ${index + 2}: Zero amount detected`);
  }

  // Category validation
  if (!record.category) {
    errors.push(`Row ${index + 2}: Missing category`);
  }

  // Currency validation
  if (record.currency && !CURRENCY_CODES.includes(record.currency as typeof CURRENCY_CODES[number])) {
    warnings.push(`Row ${index + 2}: Unsupported currency code "${record.currency}". Will use USD.`);
  }

  // Tags validation
  if (record.tags && !Array.isArray(record.tags)) {
    warnings.push(`Row ${index + 2}: Invalid tags format. Tags should be comma-separated.`);
  }

  return {
    isValid: errors.length === 0,
    warnings,
    errors
  };
};

const extractTags = (description: string): string[] => {
  // Extract hashtags
  const hashTags = (description.match(/#[\w-]+/g) || [])
    .map(tag => tag.substring(1));
  
  // Extract common business terms
  const text = description.toLowerCase();
  const commonTags = [
    'invoice', 'payment', 'salary', 'rent', 'utility',
    'subscription', 'refund', 'tax', 'insurance'
  ].filter(term => text.includes(term));
  
  // Use Array.from to fix Set iteration
  return Array.from(new Set([...hashTags, ...commonTags]));
};

const FileUpload: React.FC = () => {
  const { setFinancialData } = useFinancial();
  const { currentUser, checkUploadEligibility, updateUploadLimits } = useAuth();
  const [previewData, setPreviewData] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [showAuthModal, setShowAuthModal] = useState(false);
  const [showPaywallModal, setShowPaywallModal] = useState(false);
  const [uploadBlocked, setUploadBlocked] = useState(false);
  const [blockReason, setBlockReason] = useState<'login_required' | 'upgrade_required' | 'monthly_limit_reached'>();
  const [error, setError] = useState<string | null>(null);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [successMessage, setSuccessMessage] = useState('');
  const [showAnonymousPrompt, setShowAnonymousPrompt] = useState(false);
  const [hasInteracted, setHasInteracted] = useState(false);
  const [preprocessingOptions, setPreprocessingOptions] = useState<PreprocessingOptions>({
    categorize: true,
    normalizeAmounts: true,
    detectDuplicates: true,
    validateDates: true,
    convertCurrency: true,
    extractTags: true
  });
  const [uploadQueue, setUploadQueue] = useState<File[]>([]);
  const [processedFiles, setProcessedFiles] = useState<string[]>([]);
  const [uploadStats, setUploadStats] = useState<{
    totalFiles: number;
    processedFiles: number;
    successfulUploads: number;
    failedUploads: number;
  }>({
    totalFiles: 0,
    processedFiles: 0,
    successfulUploads: 0,
    failedUploads: 0
  });

  const downloadSampleCSV = useCallback(() => {
    const csv = Papa.unparse(sampleData);
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', 'sample_financial_data.csv');
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    // Track sample download event
    trackEvent('sample_csv_download', {
      user_type: currentUser ? 'registered' : 'anonymous',
      timestamp: new Date().toISOString()
    });

    // Show registration prompt for anonymous users
    if (!currentUser && !hasInteracted) {
      setHasInteracted(true);
      setShowAnonymousPrompt(true);
    }
  }, [currentUser, hasInteracted, setHasInteracted, setShowAnonymousPrompt]);



  
  const processExcelFile = useCallback(async (file: File): Promise<FinancialRecord[]> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = async (e) => {
        try {
          const data = new Uint8Array(e.target?.result as ArrayBuffer);
          const workbook = XLSX.read(data, { type: 'array' });
          
          // Get first worksheet
          const firstSheet = workbook.Sheets[workbook.SheetNames[0]];
          if (!firstSheet) {
            throw new Error('Excel file is empty');
          }

          // Convert to JSON with header row
          const jsonData = XLSX.utils.sheet_to_json(firstSheet, { header: 1 });
          if (!jsonData || jsonData.length < 2) {
            throw new Error('Excel file must contain at least a header row and one data row');
          }

          // Get headers from first row and normalize them
          const headers = (jsonData[0] as string[]).map(h => String(h).trim().toLowerCase());
          const requiredFields = ['date', 'amount', 'category'];
          const missingFields = requiredFields.filter(field => 
            !headers.some(h => h.includes(field)));

          if (missingFields.length > 0) {
            throw new Error(`Missing required columns: ${missingFields.join(', ')}`);
          }

          // Process data rows
          const parsedData = jsonData.slice(1).map((row: any, index) => {
            const record: { [key: string]: any } = {};
            headers.forEach((header, i) => {
              record[header] = row[i];
            });

            const date = parseDate(record.date);
            const amount = normalizeAmount(record.amount);

            if (!date) {
              throw new Error(`Invalid date format in row ${index + 2}`);
            }

            return {
              date: format(date, 'yyyy-MM-dd'),
              amount: amount,
              category: preprocessingOptions.categorize && record.description ? 
                suggestCategory(String(record.description || ''), amount) : 
                (record.category || 'Uncategorized'),
              description: String(record.description || ''),
              type: amount >= 0 ? 'income' as const : 'expense' as const,
              reference: record.reference || undefined,
              account: record.account || undefined,
              currency: record.currency || 'USD',
              status: record.status || 'completed',
              tags: record.tags ? String(record.tags).split(',').map(t => t.trim()) : undefined
            };
          });

          if (parsedData.length === 0) {
            throw new Error('No valid data rows found in Excel file');
          }

          if (preprocessingOptions.detectDuplicates) {
            const { data } = detectDuplicates(parsedData);
            resolve(data);
          } else {
            resolve(parsedData);
          }
        } catch (error) {
          reject(error);
        }
      };
      reader.onerror = () => reject(new Error('Failed to read Excel file'));
      reader.readAsArrayBuffer(file);
    });
  }, [preprocessingOptions]);

  const processCsvFile = useCallback(async (file: File): Promise<FinancialRecord[]> => {
    return new Promise((resolve, reject) => {
      Papa.parse(file, {
        complete: async (results) => {
          try {
            // Validate results object first
            if (!results || !Array.isArray(results.data)) {
              throw new Error('Invalid file format');
            }

            let parsedData = results.data
              .map((row: any) => {
                if (!row) return null;
                
                const date = row.date ? parseDate(row.date) : null;
                const amount = row.amount ? normalizeAmount(row.amount) : 0;
                
                if (!date) {
                  throw new Error('Invalid date format');
                }

                return {
                  date: format(date, 'yyyy-MM-dd'),
                  amount: amount,
                  category: preprocessingOptions.categorize && row.description ? 
                    suggestCategory(String(row.description || ''), amount) : 
                    (row.category || 'Uncategorized'),
                  description: String(row.description || ''),
                  type: amount >= 0 ? 'income' as const : 'expense' as const
                } as FinancialRecord;
              })
              .filter((row): row is FinancialRecord => row !== null);

            if (parsedData.length === 0) {
              throw new Error('No valid data found in file');
            }

            if (preprocessingOptions.detectDuplicates) {
              const { data, duplicates } = detectDuplicates<FinancialRecord>(parsedData);
              if (duplicates.length > 0) {
                console.warn(`Found ${duplicates.length} duplicate entries`);
              }
              parsedData = data;
            }

            resolve(parsedData);
          } catch (error) {
            reject(error);
          }
        },
        error: (error: Error) => {
          reject(new Error(`Failed to parse file: ${error.message}`));
        },
        header: true,
        skipEmptyLines: true,
        transformHeader: (header: string) => header.trim().toLowerCase(),
        transform: (value: string) => value ? value.trim() : value
      });
    });
  }, [preprocessingOptions]);

  const processPdfFile = async (file: File): Promise<FinancialRecord[]> => {
    return new Promise((resolve, reject) => {
      const errors: string[] = [];
      const reader = new FileReader();
      reader.onload = async (e: ProgressEvent<FileReader>) => {
        try {
          const arrayBuffer = e.target?.result as ArrayBuffer;
          // Use PDF.js to parse the PDF in the browser
          const loadingTask = pdfjs.getDocument(arrayBuffer);
          const pdf = await loadingTask.promise;
          let textContent = '';
          // Extract text from all pages
          for (let i = 1; i <= pdf.numPages; i++) {
            const page = await pdf.getPage(i);
            const content = await page.getTextContent();
            const strings = content.items.map((item: any) => item.str);
            textContent += strings.join(' ') + '\n';
          }
          const lines = textContent.split('\n')
            .map((line: string) => line.trim())
            .filter((line: string) => line.length > 0);
          const parsedData: FinancialRecord[] = [];
          let currentRecord: Partial<FinancialRecord> = {};
          for (let lineIndex = 0; lineIndex < lines.length; lineIndex++) {
            const line = lines[lineIndex];
            // Try to extract date
            const datePatterns = [
              /(Date|Transaction Date|Posting Date):?\s*([0-9]{4}[-/][0-9]{1,2}[-/][0-9]{1,2})/i,
              /([0-9]{1,2}[-/][0-9]{1,2}[-/][0-9]{4})/,
              /(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]*\s+[0-9]{1,2},\s+[0-9]{4}/i
            ];
            let foundDate = '';
            for (const pattern of datePatterns) {
              const match = line.match(pattern);
              if (match) {
                foundDate = match[2] || match[1];
                // Validate foundDate before using
                const parsedDate = parseDate(foundDate);
                if (!parsedDate) {
                  errors.push(`Invalid date format found in PDF: '${foundDate}'. Supported formats: YYYY-MM-DD, MM/DD/YYYY, DD/MM/YYYY`);
                  foundDate = '';
                } else {
                  foundDate = format(parsedDate, 'yyyy-MM-dd');
                }
                break;
              }
            }
            if (!foundDate) {
              // No date found in line; skip adding record here
            } else {
              if (Object.keys(currentRecord).length > 0) {
                parsedData.push(currentRecord as FinancialRecord);
              }
              currentRecord = { date: format(new Date(foundDate), 'yyyy-MM-dd') };
              continue;
            }
            // Try to extract amount (support various formats)
            const amountMatch = line.match(/[-+]?\$?\s*\d+(?:,\d{3})*(?:\.\d{2})?/);
            if (amountMatch && amountMatch[0]) {
              if (!currentRecord.amount) {
                currentRecord.amount = normalizeAmount(amountMatch[0]);
                continue;
              }
            }
            // Try to extract category from common patterns
            if (!currentRecord.category) {
              const commonCategories = [
                'income', 'expense', 'salary', 'rent', 'utility',
                'supplies', 'travel', 'maintenance', 'insurance'
              ];
              const foundCategory = commonCategories.find(cat => 
                line.toLowerCase().includes(cat));
              if (foundCategory) {
                currentRecord.category = foundCategory;
                currentRecord.description = line;
              }
            }
          }
          // Add last record if exists
          if (Object.keys(currentRecord).length > 0) {
            parsedData.push(currentRecord as FinancialRecord);
          }
          if (errors.length > 0) {
            reject(new Error(errors.join('\n')));
            return;
          }
          resolve(parsedData);
        } catch (error: unknown) {
          reject(error instanceof Error ? error : new Error('Failed to parse PDF'));
        }
      };
      reader.onerror = () => reject(new Error('Failed to read PDF file'));
      reader.readAsArrayBuffer(file);
    });
  };

  const processFile = useCallback(async (file: File): Promise<any[]> => {
    const fileType = file.name.split('.').pop()?.toLowerCase();
    
    try {
      let data: any[];
      let fileContent = '';
      let fileTypeForAi: 'csv' | 'excel' | 'pdf' = 'csv';
      
      switch (fileType) {
        case 'xlsx':
        case 'xls':
          fileTypeForAi = 'excel';
          data = await processExcelFile(file);
          // For AI processing, convert to CSV format
          fileContent = convertToCSVFormat(data);
          break;
        case 'csv':
          fileTypeForAi = 'csv';
          // Try AI parsing first
          try {
            fileContent = await readFileAsText(file);
            const aiResult = await aiFileParsingService.parseFinancialData(
              fileContent,
              fileTypeForAi,
              currentUser?.uid
            );
            data = aiResult.parsedData;
            setSuccessMessage(aiResult.analysis || 'File processed successfully with AI assistance.');
            // Track AI parsing success
            if (currentUser) {
              conversionTracking.trackFileUpload(
                file.type,
                file.size,
                currentUser.uid
              );
            }
          } catch (aiError) {
            console.warn('AI parsing failed, falling back to traditional parsing:', aiError);
            data = await processCsvFile(file);
          }
          break;
        case 'qbo':
        case 'qfx':
          throw new Error('QuickBooks file support coming soon');
        case 'pdf':
          fileTypeForAi = 'pdf';
          try {
            // For PDF, we need special handling
            data = await processPdfFile(file);
            // Also try AI enhancement
            const pdfText = await extractTextFromPdf(file);
            const aiResult = await aiFileParsingService.parseFinancialData(
              pdfText,
              fileTypeForAi,
              currentUser?.uid
            );
            if (aiResult.parsedData.length > 0) {
              data = aiResult.parsedData;
              setSuccessMessage(aiResult.analysis || 'PDF processed with AI assistance.');
            }
          } catch (error) {
            console.error('PDF processing error:', error);
            throw new Error(`Error processing PDF: ${error instanceof Error ? error.message : 'Unknown error'}`);
          }
          break;
        default:
          throw new Error('Unsupported file format');
      }

      // Post-process the data
      const processedData = await Promise.all(data.map(async (record, index) => {
        const validation = validateFinancialRecord(record, index);
        if (!validation.isValid) {
          throw new Error(validation.errors[0]); // Throw first error
        }

        // Convert currency if needed
        if (preprocessingOptions.convertCurrency && record.currency && record.currency !== 'USD') {
          try {
            record.amount = await convertCurrency(
              record.amount,
              record.currency,
              'USD'
            );
            record.currency = 'USD';
          } catch (error) {
            console.warn(`Failed to convert currency for row ${index + 2}:`, error);
          }
        }

        // Extract tags if enabled
        if (preprocessingOptions.extractTags && record.description) {
          record.tags = extractTags(record.description);
        }

        return record;
      }));

      return processedData;
    } catch (error: any) {
      throw new Error(`Error processing ${file.name}: ${error.message}`);
    }
  }, [currentUser, preprocessingOptions, setSuccessMessage, processCsvFile, processExcelFile]);
  
  // Convert data to CSV format for AI processing
  const convertToCSVFormat = (data: any[]): string => {
    const headers = Object.keys(data[0] || {});
    const rows = data.map(item => {
      return headers.map(header => {
        const value = item[header];
        if (value === null || value === undefined) return '';
        return typeof value === 'string' ? `"${value.replace(/"/g, '""')}"` : String(value);
      }).join(',');
    });
    
    return [
      headers.join(','),
      ...rows
    ].join('\n');
  };
  
  // Extract text from PDF for AI processing
  const extractTextFromPdf = async (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = async (e: ProgressEvent<FileReader>) => {
        try {
          const arrayBuffer = e.target?.result as ArrayBuffer;
          const loadingTask = pdfjs.getDocument(arrayBuffer);
          const pdf = await loadingTask.promise;
          let textContent = '';
          
          for (let i = 1; i <= pdf.numPages; i++) {
            const page = await pdf.getPage(i);
            const content = await page.getTextContent();
            const strings = content.items.map((item: any) => item.str);
            textContent += strings.join(' ') + '\n';
          }
          
          resolve(textContent);
        } catch (error) {
          reject(error);
        }
      };
      reader.onerror = () => reject(new Error('Failed to read PDF file'));
      reader.readAsArrayBuffer(file);
    });
  };

  const onDrop = useCallback(async (acceptedFiles: File[]) => {
    if (!currentUser) {
      setShowAuthModal(true);
      setHasInteracted(true);
      return;
    }
    // Track file upload attempt
    trackEvent('file_upload_attempt', {
      file_count: acceptedFiles.length,
      file_types: acceptedFiles.map(file => file.type),
      user_type: currentUser ? 'registered' : 'anonymous'
    });

    // Show anonymous user prompt after first interaction
    if (!currentUser && !hasInteracted) {
      setHasInteracted(true);
      setShowAnonymousPrompt(true);
    }
    if (!currentUser) {
      setShowAuthModal(true);
      setBlockReason('login_required');
      setUploadBlocked(true);
      return;
    }

    const eligibility = await checkUploadEligibility();
    if (!eligibility.canUpload) {
      setUploadBlocked(true);
      setBlockReason(eligibility.reason as 'login_required' | 'upgrade_required' | 'monthly_limit_reached');
      if (eligibility.reason === 'upgrade_required' || eligibility.reason === 'monthly_limit_reached') {
        setShowPaywallModal(true);
      }
      return;
    }

    setIsLoading(true);
    setError(null);
    setUploadProgress(0);
    setUploadQueue(acceptedFiles);
    setUploadStats({
      totalFiles: acceptedFiles.length,
      processedFiles: 0,
      successfulUploads: 0,
      failedUploads: 0
    });

    try {
      const allData: any[] = [];
      for (const file of acceptedFiles) {
        try {
          const processedData = await processFile(file);
          allData.push(...processedData);
          setProcessedFiles(prev => [...prev, file.name]);
          setUploadStats(prev => ({
            ...prev,
            processedFiles: prev.processedFiles + 1,
            successfulUploads: prev.successfulUploads + 1
          }));
        } catch (error: any) {
          console.error(`Error processing file ${file.name}:`, error);
          setUploadStats(prev => ({
            ...prev,
            processedFiles: prev.processedFiles + 1,
            failedUploads: prev.failedUploads + 1
          }));
        }
        // Cap the progress percentage at 100%
        const progressPercentage = Math.min(100, (uploadStats.processedFiles / uploadStats.totalFiles) * 100);
        setUploadProgress(progressPercentage);
      }

      if (allData.length > 0) {
        setPreviewData(allData.slice(0, 5));
      setFinancialData(allData);

      await updateUploadLimits({
        freeUploadUsed: true,
        lastFreeUpload: new Date().toISOString(),
        hasPremium: false
      });
      
      // Show upgrade prompt after successful free upload if not premium
      if (!currentUser?.isPremium) {
        setTimeout(() => {
          setUploadBlocked(true);
          setBlockReason('upgrade_required');
        }, 2000);
      }
      }
    } catch (error: any) {
      setError(error.message);
    } finally {
      setIsLoading(false);
      setUploadQueue([]);
    }
  }, [currentUser, checkUploadEligibility, setFinancialData, updateUploadLimits, processFile, uploadStats.processedFiles, uploadStats.totalFiles, hasInteracted]);

  const { getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject } = useDropzone({
    onDrop,
    accept: {
      'text/csv': SUPPORTED_FORMATS.CSV,
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': SUPPORTED_FORMATS.EXCEL,
      'application/vnd.ms-excel': SUPPORTED_FORMATS.EXCEL,
      'application/x-quickbooks': SUPPORTED_FORMATS.QUICKBOOKS,
      'application/pdf': SUPPORTED_FORMATS.PDF
    },
    maxFiles: 10,
    maxSize: 10485760, // Increased to 10MB
    onDropRejected: (fileRejections) => {
      const error = fileRejections[0]?.errors[0];
      if (error.code === 'file-too-large') {
        setError('File is too large. Maximum size is 10MB.');
      } else if (error.code === 'file-invalid-type') {
        setError('Invalid file type. Please upload a supported file format.');
      } else {
        setError('Error uploading file. Please try again.');
      }
    }
  });

  const PreprocessingControls: React.FC<{
    options: PreprocessingOptions;
    onChange: (options: PreprocessingOptions) => void;
  }> = ({ options, onChange }) => (
    <div className="mt-2">
      <div className="flex flex-wrap gap-2 mb-2">
        <button
          className={`px-3 py-1.5 text-xs rounded-md flex items-center transition-all duration-200 ${
            options.categorize ? 'bg-primary-100 text-primary-700 shadow-sm' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
          }`}
          onClick={() => onChange({ ...options, categorize: !options.categorize })}
        >
          <svg className={`w-3.5 h-3.5 mr-1.5 ${options.categorize ? 'text-primary-500' : 'text-gray-500'}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
          </svg>
          Auto-categorize
        </button>
        <button
          className={`px-3 py-1.5 text-xs rounded-md flex items-center transition-all duration-200 ${
            options.detectDuplicates ? 'bg-primary-100 text-primary-700 shadow-sm' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
          }`}
          onClick={() => onChange({ ...options, detectDuplicates: !options.detectDuplicates })}
        >
          <svg className={`w-3.5 h-3.5 mr-1.5 ${options.detectDuplicates ? 'text-primary-500' : 'text-gray-500'}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
          </svg>
          Detect Duplicates
        </button>
        <button
          className={`px-3 py-1.5 text-xs rounded-md flex items-center transition-all duration-200 ${
            options.normalizeAmounts ? 'bg-primary-100 text-primary-700 shadow-sm' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
          }`}
          onClick={() => onChange({ ...options, normalizeAmounts: !options.normalizeAmounts })}
        >
          <svg className={`w-3.5 h-3.5 mr-1.5 ${options.normalizeAmounts ? 'text-primary-500' : 'text-gray-500'}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          Normalize Amounts
        </button>
      </div>
      <div className="flex flex-wrap gap-2">
        <button
          className={`px-3 py-1.5 text-xs rounded-md flex items-center transition-all duration-200 ${
            options.convertCurrency ? 'bg-primary-100 text-primary-700 shadow-sm' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
          }`}
          onClick={() => onChange({ ...options, convertCurrency: !options.convertCurrency })}
        >
          <svg className={`w-3.5 h-3.5 mr-1.5 ${options.convertCurrency ? 'text-primary-500' : 'text-gray-500'}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          Convert Currency
        </button>
        <button
          className={`px-3 py-1.5 text-xs rounded-md flex items-center transition-all duration-200 ${
            options.extractTags ? 'bg-primary-100 text-primary-700 shadow-sm' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
          }`}
          onClick={() => onChange({ ...options, extractTags: !options.extractTags })}
        >
          <svg className={`w-3.5 h-3.5 mr-1.5 ${options.extractTags ? 'text-primary-500' : 'text-gray-500'}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
          </svg>
          Extract Tags
        </button>
        <button
          className="px-3 py-1.5 text-xs rounded-md flex items-center bg-gray-100 text-gray-700 hover:bg-gray-200 transition-all duration-200"
          onClick={() => onChange({
            categorize: true,
            normalizeAmounts: true,
            detectDuplicates: true,
            validateDates: true,
            convertCurrency: true,
            extractTags: true
          })}
        >
          <svg className="w-3.5 h-3.5 mr-1.5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
          </svg>
          Enable All
        </button>
      </div>
    </div>
  );

  return (
    <div className="space-y-4">
      {/* Anonymous User Prompt */}
      {showAnonymousPrompt && !currentUser && (
        <div className="mb-6 bg-gradient-to-r from-primary-50 to-primary-100 border border-primary-200 rounded-lg shadow-sm overflow-hidden">
          <div className="flex flex-col md:flex-row items-stretch">
            <div className="p-5 flex-1">
              <div className="flex items-start">
                  <div className="flex-shrink-0 bg-primary-100 p-2 rounded-full">
                    <svg className="h-6 w-6 text-primary-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z" />
                    </svg>
                </div>
                <div className="ml-3">
                  <h3 className="text-lg font-semibold text-primary-800">👋 Unlock the Full Power of Your Financial Data</h3>
                  <p className="mt-1 text-sm text-primary-700">Create a free account in 30 seconds to save your work and access premium features.</p>
                </div>
              </div>
              
              <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-3">
                <div className="bg-white bg-opacity-70 p-3 rounded-lg border border-primary-200 flex items-start">
                  <svg className="h-5 w-5 text-primary-500 mt-0.5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <div>
                    <h4 className="text-sm font-medium text-gray-800">Save Your Financial Data</h4>
                    <p className="text-xs text-gray-600">Access your uploaded files anytime, anywhere</p>
                  </div>
                </div>
                
                <div className="bg-white bg-opacity-70 p-3 rounded-lg border border-primary-200 flex items-start">
                  <svg className="h-5 w-5 text-primary-500 mt-0.5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                  </svg>
                  <div>
                    <h4 className="text-sm font-medium text-gray-800">AI-Powered Insights</h4>
                    <p className="text-xs text-gray-600">Get smart recommendations to optimize your finances</p>
                  </div>
                </div>
                
                <div className="bg-white bg-opacity-70 p-3 rounded-lg border border-primary-200 flex items-start">
                  <svg className="h-5 w-5 text-primary-500 mt-0.5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                  </svg>
                  <div>
                    <h4 className="text-sm font-medium text-gray-800">Track Business Metrics</h4>
                    <p className="text-xs text-gray-600">Monitor KPIs and growth trends over time</p>
                  </div>
                </div>
                
                <div className="bg-white bg-opacity-70 p-3 rounded-lg border border-primary-200 flex items-start">
                  <svg className="h-5 w-5 text-primary-500 mt-0.5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                  </svg>
                  <div>
                    <h4 className="text-sm font-medium text-gray-800">Secure & Private</h4>
                    <p className="text-xs text-gray-600">Bank-level encryption for your sensitive data</p>
                  </div>
                </div>
              </div>
              
              <div className="mt-5 flex items-center space-x-4">
                <button
                  onClick={() => setShowAuthModal(true)}
                  className="flex-1 md:flex-none inline-flex justify-center items-center px-5 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors duration-200"
                >
                  Create Free Account
                </button>
                <button
                  onClick={() => setShowAnonymousPrompt(false)}
                  className="text-sm text-primary-700 hover:text-primary-800 font-medium"
                >
                  Continue as Guest
                </button>
              </div>
            </div>
            
            <div className="hidden md:block bg-primary-600 w-1/4 min-w-[120px] relative overflow-hidden">
              <div className="absolute inset-0 opacity-20">
                <svg className="h-full w-full" viewBox="0 0 100 100" preserveAspectRatio="none">
                  <path d="M0,0 L100,0 L100,100 L0,100 Z" fill="none" stroke="white" strokeWidth="2" />
                  <path d="M0,0 L100,100 M100,0 L0,100" stroke="white" strokeWidth="2" />
                </svg>
              </div>
              <div className="absolute inset-0 flex items-center justify-center">
                <div className="text-white text-center p-4">
                  <svg className="h-12 w-12 mx-auto mb-2 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <p className="text-sm font-medium">Join 10,000+ businesses optimizing their finances</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
      {showAuthModal && (
        <AuthModal 
          isOpen={showAuthModal} 
          onClose={() => {
            setShowAuthModal(false);
            // If user was trying to upload, show paywall after login
            if (blockReason === 'login_required') {
              setTimeout(() => {
                setShowPaywallModal(true);
                setBlockReason('upgrade_required');
              }, 500);
            }
          }} 
        />
      )}
      
      {showPaywallModal && (
        <PaywallModal
          isOpen={showPaywallModal}
          onClose={() => {
            setShowPaywallModal(false);
            // Reset upload blocked state if user upgraded
            if (currentUser?.isPremium) {
              setUploadBlocked(false);
              setBlockReason(undefined);
            }
          }}
        />
      )}
      
      {uploadBlocked && (
        <div className="rounded-lg bg-amber-50 p-4">
          <div className="flex">
            <div className="flex-shrink-0">
              <svg className="h-5 w-5 text-amber-400" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M8.485 2.495c.873-1.512 3.157-1.512 4.03 0l8.485 14.14c.873 1.512-.218 3.407-2.015 3.407H2.015c-1.797 0-2.888-1.895-2.015-3.407l8.485-14.14zM10 5a.75.75 0 01.75.75v5.5a.75.75 0 01-1.5 0v-5.5A.75.75 0 0110 5zm0 9a1 1 0 100-2 1 1 0 000 2z" clipRule="evenodd" />
              </svg>
            </div>
            <div className="ml-3">
              <h3 className="text-sm font-medium text-amber-800">
                {blockReason === 'login_required' 
                  ? 'Authentication Required' 
                  : 'Upload Limit Reached'
                }
              </h3>
              <div className="mt-2 text-sm text-amber-700">
                <p>
                  {blockReason === 'login_required'
                    ? 'Please log in to upload files.'
                    : "You've reached your upload limit. Upgrade to premium for unlimited uploads."
                  }
                </p>
              </div>
              <div className="mt-4">
                <div className="-mx-2 -my-1.5 flex">
                  <button
                    onClick={() => blockReason === 'login_required' ? setShowAuthModal(true) : setShowPaywallModal(true)}
                    className="rounded-md bg-amber-50 px-2 py-1.5 text-sm font-medium text-amber-800 hover:bg-amber-100 focus:outline-none focus:ring-2 focus:ring-amber-600 focus:ring-offset-2 focus:ring-offset-amber-50"
                  >
                    {blockReason === 'login_required' ? 'Log In' : 'Upgrade'}
                  </button>
                  <button
                    onClick={() => setUploadBlocked(false)}
                    className="ml-3 rounded-md bg-amber-50 px-2 py-1.5 text-sm font-medium text-amber-800 hover:bg-amber-100 focus:outline-none focus:ring-2 focus:ring-amber-600 focus:ring-offset-2 focus:ring-offset-amber-50"
                  >
                    Dismiss
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      <div className="mb-8 bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
        <div className="bg-gradient-to-r from-primary-50 to-white p-6 border-b border-gray-100">
          <div className="flex flex-col md:flex-row md:items-center md:justify-between">
            <div className="mb-4 md:mb-0 flex items-start">
              <div className="flex-shrink-0 bg-primary-100 p-2.5 rounded-lg">
                <svg className="w-6 h-6 text-primary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
              </div>
              <div className="ml-4">
                <h3 className="text-xl font-semibold text-gray-900">Upload Financial Data</h3>
                <p className="text-sm text-gray-600 mt-1">
                  Import your financial records for analysis and forecasting
                </p>
              </div>
            </div>
            <div className="flex flex-wrap items-center gap-3">
              <div className="flex items-center bg-white rounded-md p-1 border border-gray-200 shadow-sm">
                <button
                  onClick={() => setPreprocessingOptions(prev => ({...prev, categorize: !prev.categorize}))}
                  className={`text-sm px-3 py-1.5 rounded transition-all duration-200 flex items-center ${
                    preprocessingOptions.categorize ? 'bg-primary-100 text-primary-700 shadow-sm' : 'text-gray-700 hover:bg-gray-100'
                  }`}
                >
                  <svg className={`w-4 h-4 mr-1.5 transition-colors duration-200 ${preprocessingOptions.categorize ? 'text-primary-600' : 'text-gray-500'}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                  </svg>
                  Auto-categorize
                </button>
              </div>
              <button
                onClick={downloadSampleCSV}
                className="text-sm px-3 py-1.5 bg-white border border-primary-200 text-primary-700 hover:bg-primary-50 rounded shadow-sm transition-all duration-200 flex items-center"
              >
                <svg className="w-4 h-4 mr-1.5 text-primary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10" />
                </svg>
                Download Sample
              </button>
            </div>
          </div>
          
          <div className="mt-5 grid grid-cols-1 sm:grid-cols-3 gap-3">
            <div className="bg-white bg-opacity-70 p-3 rounded-lg border border-gray-200 flex items-start">
              <svg className="h-5 w-5 text-primary-500 mt-0.5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              <div>
                <h4 className="text-sm font-medium text-gray-800">Date Column</h4>
                <p className="text-xs text-gray-600">Required for transaction timeline</p>
              </div>
            </div>
            <div className="bg-white bg-opacity-70 p-3 rounded-lg border border-gray-200 flex items-start">
              <svg className="h-5 w-5 text-primary-500 mt-0.5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <div>
                <h4 className="text-sm font-medium text-gray-800">Amount Column</h4>
                <p className="text-xs text-gray-600">Required for financial calculations</p>
              </div>
            </div>
            <div className="bg-white bg-opacity-70 p-3 rounded-lg border border-gray-200 flex items-start">
              <svg className="h-5 w-5 text-primary-500 mt-0.5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
              </svg>
              <div>
                <h4 className="text-sm font-medium text-gray-800">Category Column</h4>
                <p className="text-xs text-gray-600">Recommended for better insights</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {error && (
        <div className="bg-danger-50 border border-danger-200 rounded-lg p-5 shadow-sm my-4">
          <div className="flex">
            <div className="flex-shrink-0">
              <svg className="h-6 w-6 text-danger-500" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.28 7.22a.75.75 0 00-1.06 1.06L8.94 10l-1.72 1.72a.75.75 0 101.06 1.06L10 11.06l1.72 1.72a.75.75 0 101.06-1.06L11.06 10l1.72-1.72a.75.75 0 00-1.06-1.06L10 8.94 8.28 7.22z" clipRule="evenodd" />
              </svg>
            </div>
            <div className="ml-4">
              <h3 className="text-base font-semibold text-danger-800">Upload Error</h3>
              <div className="mt-2 text-sm text-danger-700">
                <p>{error}</p>
                <div className="mt-4 bg-white p-4 rounded-md border border-danger-100">
                  <h4 className="font-medium text-sm text-danger-800 mb-2 flex items-center">
                    <svg className="h-4 w-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    Troubleshooting Tips
                  </h4>
                  <ul className="list-disc list-inside text-sm text-gray-700 space-y-1">
                    <li>Ensure your file has headers for date, amount, and category</li>
                    <li>Check that date formats are consistent (e.g., YYYY-MM-DD)</li>
                    <li>Verify that amount values are numeric</li>
                    <li>Make sure the file is not corrupted or password-protected</li>
                  </ul>
                  <div className="mt-3 flex items-center">
                    <button 
                      onClick={downloadSampleCSV} 
                      className="inline-flex items-center px-3 py-1.5 border border-primary-300 shadow-sm text-sm font-medium rounded-md text-primary-700 bg-white hover:bg-primary-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
                    >
                      <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10" />
                      </svg>
                      Download Sample CSV
                    </button>
                    <button 
                      onClick={() => setError(null)} 
                      className="ml-3 text-sm text-gray-600 hover:text-gray-800"
                    >
                      Dismiss
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {uploadBlocked && blockReason === 'upgrade_required' && !showPaywallModal && (
        <div className="rounded-lg bg-primary-50 p-4 mb-4">
          <div className="flex">
            <div className="flex-shrink-0">
              <svg className="h-6 w-6 text-primary-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
              </svg>
            </div>
            <div className="ml-3">
              <h3 className="text-lg font-medium text-primary-800">Want to upload more files?</h3>
              <div className="mt-2 text-sm text-primary-700">
                <p>You've used your free upload. Upgrade to premium for unlimited uploads and advanced features.</p>
                <div className="mt-3 flex space-x-4">
                  <button
                    onClick={() => setShowPaywallModal(true)}
                    className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
                  >
                    Upgrade Now
                  </button>
                  <button
                    onClick={() => setUploadBlocked(false)}
                    className="inline-flex items-center px-4 py-2 border border-primary-300 text-sm font-medium rounded-md text-primary-700 bg-white hover:bg-primary-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
                  >
                    Dismiss
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
      
      <div className="p-1 bg-white rounded-xl shadow-sm">
        <div
          {...getRootProps()}
          className={`
            relative border-2 border-dashed rounded-xl p-8 transition-all duration-300
            ${isDragActive ? 'border-primary-400 bg-primary-50 shadow-md' : 'border-gray-300 hover:border-primary-300 hover:bg-gray-50'}
            ${isDragAccept ? 'border-success-400 bg-success-50 shadow-md' : ''}
            ${isDragReject ? 'border-danger-400 bg-danger-50 shadow-md' : ''}
            ${uploadBlocked ? 'opacity-75 pointer-events-none' : ''}
          `}
        >
          <input {...getInputProps()} />
          <div className="text-center">
            <div className="flex flex-col items-center justify-center">
              <div className={`
                p-5 rounded-full mb-5 transition-all duration-300 shadow-sm
                ${isDragActive ? 'bg-primary-100' : 'bg-gray-50'}
                ${isDragAccept ? 'bg-success-100' : ''}
                ${isDragReject ? 'bg-danger-100' : ''}
              `}>
                <svg
                  className={`h-14 w-14 transition-colors duration-300 ${
                    isDragActive ? 'text-primary-500' : 'text-gray-400'
                  } ${
                    isDragAccept ? 'text-success-500' : ''
                  } ${
                    isDragReject ? 'text-danger-500' : ''
                  }`}
                  stroke="currentColor"
                  fill="none"
                  viewBox="0 0 48 48"
                  aria-hidden="true"
                >
                  <path
                    d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02"
                    strokeWidth={2}
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  />
                </svg>
              </div>
            </div>
            
            <div className="flex flex-col items-center justify-center mb-4">
              <p className="text-lg font-medium text-gray-700 mb-1">
                {isDragActive
                  ? isDragAccept
                    ? "Drop your files here"
                    : "This file type is not supported"
                  : "Upload your financial data"}
              </p>
              <div className="flex items-center justify-center text-sm text-gray-600 gap-1">
                <label
                  htmlFor="file-upload"
                  className="relative cursor-pointer rounded-md font-medium text-primary-600 hover:text-primary-500 transition-colors duration-200"
                >
                  <span>Select files</span>
                </label>
                <p className="px-1">{isDragActive ? "" : "or drag and drop"}</p>
              </div>
            </div>
            
            <div className="flex flex-wrap justify-center gap-2 mb-2">
              {Object.entries(SUPPORTED_FORMATS).map(([format, extensions]) => (
                <div key={format} className="px-2.5 py-1 bg-white border border-gray-200 rounded-full text-xs font-medium text-gray-700 flex items-center shadow-sm">
                  <span className="font-medium">{format}</span>
                  <span className="ml-1">({extensions.join(', ')})</span>
                </div>
              ))}
            </div>
            <p className="text-xs text-gray-500 mt-2">
              Maximum file size: 10MB each
            </p>
          
          {uploadQueue.length > 0 && (
            <div className="mt-6 bg-gray-50 p-3 rounded-lg border border-gray-200">
              <div className="flex items-center justify-center gap-2">
                <svg className="animate-spin h-4 w-4 text-primary-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                <p className="text-sm font-medium text-gray-700">Processing {uploadQueue.length} files...</p>
              </div>
              <p className="text-xs text-gray-500 mt-1 text-center">
                {uploadStats.processedFiles} / {uploadStats.totalFiles} files processed
              </p>
            </div>
          )}
        </div>

        {isLoading && (
          <div className="absolute inset-0 bg-white bg-opacity-80 backdrop-blur-sm flex items-center justify-center rounded-xl transition-all duration-300 z-10">
            <div className="text-center w-4/5 max-w-md p-6 bg-white rounded-xl shadow-xl border border-gray-100 transform transition-all duration-300">
              <div className="mb-6">
                <div className="relative mx-auto w-16 h-16 mb-4">
                  <svg className="animate-spin absolute inset-0 h-16 w-16 text-primary-200" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  <div className="absolute inset-0 flex items-center justify-center">
                    <svg className="h-8 w-8 text-primary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                  </div>
                </div>
                <h3 className="text-xl font-semibold text-gray-900 mb-2">Processing Your Financial Data</h3>
                <p className="text-sm text-gray-600 mb-4">Our AI is analyzing your records to provide insights and forecasting</p>
              </div>
              
              <div className="w-full bg-gray-100 rounded-full h-3 mb-4 shadow-inner overflow-hidden">
                <div
                  className="bg-primary-600 h-3 rounded-full transition-all duration-300 shadow-sm"
                  style={{ width: `${Math.min(100, uploadProgress)}%` }}
                ></div>
              </div>
              
              <div className="flex items-center justify-between mb-1">
                <p className="text-sm font-medium text-gray-700">
                  {Number.isNaN(uploadProgress) ? 0 : Math.min(100, Math.round(uploadProgress))}% Complete
                </p>
                <p className="text-sm font-medium text-primary-600">
                  {uploadStats.processedFiles} of {uploadStats.totalFiles}
                </p>
              </div>
              
              <div className="text-xs text-gray-500 mb-4 flex items-center justify-center">
                <svg className="animate-pulse h-4 w-4 mr-1 text-primary-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                </svg>
                <span>AI-powered analysis in progress</span>
              </div>
              
              {uploadStats.failedUploads > 0 && (
                <div className="mt-4 p-3 bg-danger-50 border border-danger-200 rounded-md shadow-sm">
                  <p className="text-sm text-danger-700 flex items-center">
                    <svg className="h-5 w-5 mr-2 text-danger-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                    </svg>
                    <span className="font-medium">{uploadStats.failedUploads} file(s) failed to process</span>
                  </p>
                </div>
              )}
            </div>
          </div>
        )}
      </div>

      {previewData.length > 0 && !error && (
        <div className="rounded-xl border border-gray-200 overflow-hidden shadow-md mt-8 bg-white">
          <div className="px-6 py-5 border-b border-gray-200 bg-gradient-to-r from-white to-gray-50">
            <div className="flex flex-col md:flex-row md:justify-between md:items-start gap-5">
              <div>
                <h3 className="text-lg font-semibold text-gray-800 flex items-center">
                  <div className="bg-primary-50 p-2 rounded-lg mr-3">
                    <svg className="w-6 h-6 text-primary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                    </svg>
                  </div>
                  Financial Data Preview
                </h3>
                {processedFiles.length > 0 && (
                  <div className="mt-2 text-sm text-gray-600 flex items-center ml-11">
                    <svg className="w-5 h-5 mr-2 text-success-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                    </svg>
                    <span className="font-medium">Successfully processed:</span> <span className="ml-1 text-primary-600">{processedFiles.join(', ')}</span>
                  </div>
                )}
              </div>
              <div className="bg-white p-4 rounded-xl border border-gray-100 shadow-sm hover:shadow-md transition-all duration-300">
                <h4 className="text-sm font-medium text-gray-700 mb-3 flex items-center">
                  <svg className="w-4 h-4 mr-2 text-primary-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>
                  Processing Options
                </h4>
                <PreprocessingControls options={preprocessingOptions} onChange={setPreprocessingOptions} />
              </div>
            </div>
            
            {successMessage && (
              <div className="mt-5 p-4 bg-primary-50 border border-primary-100 rounded-lg shadow-sm">
                <div className="flex items-start">
                  <svg className="w-5 h-5 mr-2 text-primary-500 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <div>
                    <p className="font-medium text-sm text-primary-800">AI Analysis</p>
                    <p className="text-sm text-primary-700 mt-1">{successMessage}</p>
                  </div>
                </div>
              </div>
            )}
          </div>
          
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gradient-to-r from-gray-50 to-gray-100">
                <tr>
                  {Object.keys(previewData[0]).map(key => {
                    // Customize header styling based on column type
                    let headerStyle = "px-6 py-3.5 text-left text-xs font-semibold uppercase tracking-wider ";
                    
                    if (key === 'date' || key === 'transaction_date') {
                      headerStyle += "text-gray-700 border-b-2 border-gray-300";
                    } else if (key === 'amount') {
                      headerStyle += "text-primary-700 border-b-2 border-primary-300";
                    } else if (key === 'category') {
                      headerStyle += "text-primary-700 border-b-2 border-primary-300";
                    } else if (key === 'type') {
                      headerStyle += "text-gray-700 border-b-2 border-gray-300";
                    } else {
                      headerStyle += "text-gray-600 border-b-2 border-gray-200";
                    }
                    
                    return (
                      <th key={key} className={headerStyle}>
                        <div className="flex items-center">
                          {key === 'date' || key === 'transaction_date' ? (
                            <svg className="w-4 h-4 mr-1 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                            </svg>
                          ) : key === 'amount' ? (
                            <svg className="w-4 h-4 mr-1 text-primary-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                          ) : key === 'category' ? (
                            <svg className="w-4 h-4 mr-1 text-primary-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                            </svg>
                          ) : key === 'description' ? (
                            <svg className="w-4 h-4 mr-1 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h7" />
                            </svg>
                          ) : null}
                          {key.charAt(0).toUpperCase() + key.slice(1).replace('_', ' ')}
                        </div>
                      </th>
                    );
                  })}
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-100">
                {previewData.map((row, rowIndex) => (
                  <tr key={rowIndex} className="hover:bg-gray-50 transition-all duration-200">
                    {Object.entries(row).map(([key, value]: [string, any], colIndex) => {
                      // Determine cell styling based on content type
                      let cellStyle = "px-6 py-4 whitespace-nowrap text-sm";
                      let formattedValue = value;
                      
                      if (value instanceof Date) {
                        formattedValue = value.toLocaleDateString();
                        cellStyle += " text-gray-700 font-medium";
                      } else if (typeof value === 'number') {
                        // Format currency with color based on positive/negative
                        const isNegative = value < 0;
                        formattedValue = value.toLocaleString('en-US', { 
                          style: 'currency', 
                          currency: 'USD' 
                        });
                        
                        // Enhanced styling for amounts
                        if (isNegative) {
                          cellStyle += " text-danger-600 font-medium bg-danger-50 bg-opacity-30 rounded-md px-3";
                        } else {
                          cellStyle += " text-success-600 font-medium bg-success-50 bg-opacity-30 rounded-md px-3";
                        }
                      } else if (key === 'category') {
                        // Enhanced styling for categories
                        cellStyle += " text-primary-700 font-medium";
                        formattedValue = (
                          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary-100 text-primary-800">
                            {String(value)}
                          </span>
                        );
                      } else if (key === 'type') {
                        if (value === 'income') {
                          cellStyle += " text-success-700";
                          formattedValue = (
                            <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-success-100 text-success-800">
                              Income
                            </span>
                          );
                        } else {
                          cellStyle += " text-danger-700";
                          formattedValue = (
                            <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-danger-100 text-danger-800">
                              Expense
                            </span>
                          );
                        }
                      } else {
                        cellStyle += " text-gray-600";
                      }
                      
                      return (
                        <td key={colIndex} className={cellStyle}>
                          {formattedValue}
                        </td>
                      );
                    })}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
          
          <div className="px-6 py-4 bg-gray-50 border-t border-gray-200 flex flex-col sm:flex-row justify-between items-center gap-3">
            <div className="flex items-center">
              <svg className="w-5 h-5 mr-2 text-primary-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
              </svg>
              <p className="text-sm text-gray-600 font-medium">
                Showing <span className="text-primary-600">{previewData.length}</span> financial records
              </p>
            </div>
            <button 
              className="text-sm text-white bg-primary-600 hover:bg-primary-700 px-4 py-2 rounded-lg font-medium flex items-center transition-colors duration-200 shadow-sm"
              onClick={() => {
                // This would typically load more data or export the data
                alert('Full data is available in the dashboard view');
              }}
            >
              <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
              </svg>
              Export to Dashboard
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default FileUpload;