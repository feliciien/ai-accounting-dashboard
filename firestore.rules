rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return request.auth.token.admin == true;
    }
    
    function isUser(userId) {
      return request.auth.uid == userId;
    }
    
    function isValidUserDocument() {
      return request.resource.data.keys().hasAll(['email', 'createdAt'])
        && request.resource.data.email is string
        && request.resource.data.createdAt is timestamp;
    }
    
    // Users can only manage their own documents
    match /users/{userId} {
      allow read, update, delete: if isUser(userId);
      allow create: if isSignedIn() && isValidUserDocument();
    }
    
    // Admins have full access to configuration
    match /config/{document=**} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    // Transactions require valid data structure
    match /transactions/{transactionId} {
      allow create: if isSignedIn()
        && request.resource.data.keys().hasAll(['amount', 'date', 'description'])
        && request.resource.data.amount is number
        && request.resource.data.date is timestamp
        && request.resource.data.description is string;
      
      allow read, update, delete: if isUser(resource.data.userId);
    }
    
    // Audit trail for security-sensitive operations
    match /audit/{auditId} {
      allow create: if isAdmin();
      allow read: if isAdmin();
    }
  }
}

// Test rules configuration (for local testing)
// test "user can create valid profile" {
//   function getAuth() {
//     return {
//       uid: "test_user",
//       token: {}
//     }
//   }
//   
//   let data = {
//     email: "test@example.com",
//     createdAt: timestamp()
//   };
//   
//   assert create(
//     getAuth(),
//     /databases/$(database)/documents/users/test_user,
//     data
//   ).succeeds();
// }